<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人博客搭建流程：部署hexo</title>
      <link href="/2023/04/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E9%83%A8%E7%BD%B2hexo%E5%92%8Cnext/"/>
      <url>/2023/04/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E9%83%A8%E7%BD%B2hexo%E5%92%8Cnext/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>  <h1 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h1><p>终于快望到头了！但是这里也是最容易报错的地方。  </p><h1 id="node-js的安装和更改"><a href="#node-js的安装和更改" class="headerlink" title="node.js的安装和更改"></a>node.js的安装和更改</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>下载地址：<a href="https://nodejs.org/en/">node.js</a><br>下载完直接安装即可，安装过程除了设置安装地址以外都可以点next跳过。<br>安装完成之后，可以打开命令提示符（cmd）,输入以下命令检查自己是否安装成功。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v </span><br></pre></td></tr></table></figure><p><img src="/images/QQ截图20230430224535.png" alt="显示样子">  </p><h2 id="设置npm在安装全局模块时的路径和环境变量"><a href="#设置npm在安装全局模块时的路径和环境变量" class="headerlink" title="设置npm在安装全局模块时的路径和环境变量"></a>设置npm在安装全局模块时的路径和环境变量</h2><p>这是为了防止安装模块时候自动把模块安装到C盘里和hexo明明安装了但是没办法使用的情况。<br>在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global，如下图：<br><img src="/images/QQ截图20230430225304.png" alt="显示样子"><br>打开cmd，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;你的nodejs安装地址\node_global&quot;</span><br><span class="line">npm config set cache &quot;你的nodejs安装地址\node_cache&quot;</span><br></pre></td></tr></table></figure><p>设置环境变量：win键+Q调出查询窗口，输入环境变量之后点击选项，如图：<br><img src="/images/uTools_1682866586269.png" alt="显示样子"><br><img src="/images/QQ截图20230430225804.png" alt="显示样子"><br>在系统变量中新建一个变量名为“NODE_PATH”，值为“你的nodejs地址\node_global\node_modules”，如下图：<br><img src="/images/QQ截图20230430225930.png" alt="显示样子"><br><img src="/images/QQ截图20230430230012.png" alt="显示样子"><br><img src="/images/QQ截图20230430230037.png" alt="显示样子"><br>然后编辑用户变量里的Path，将相应npm的路径改为：你的nodejs地址\node_global，如下图：<br><img src="/images/QQ截图20230430230212.png" alt="显示样子"><br><img src="/images/QQ截图20230430230312.png" alt="显示样子"><br><img src="/images/QQ截图20230430230353.png" alt="显示样子">  </p><h2 id="测试是否起效"><a href="#测试是否起效" class="headerlink" title="测试是否起效"></a>测试是否起效</h2><p>在cmd窗口（注意：要以管理员模式运行）输入指令：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>这玩意就会下载在我们指定的路径了：<br><img src="/images/QQ截图20230430230730.png" alt="显示样子">  </p><h1 id="Hexo的安装和部署"><a href="#Hexo的安装和部署" class="headerlink" title="Hexo的安装和部署"></a>Hexo的安装和部署</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>hexo是我们网站的一个框架，当然还有很多可供我们使用的框架，这里举例hexo只是因为<del>我很菜我只用过这个</del>个人喜好。</p><p>在安装hexo之前，我们需要在Github上面建立一个仓库，用来放置相关文件。</p><ul><li>项目必须选择公开（Public），不能设为私密。</li></ul><p><img src="../images/Snipaste_2023-05-07_15-39-42.png" alt=""></p><p><img src="../images/Snipaste_2023-05-07_15-40-39.png" alt=""></p><p>然后就开始部署hexo啦。选择一个盘，建立文件夹“Blog”。在Blog文件夹右键点击”Git Bash here“,然后输入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果代码无法执行或者报错：</p><ul><li>你是mac用户：在命令前加suto</li><li>选择用管理员模式打开git之后再输入命令</li><li>把代码换成：npx install -g hexo-cli</li></ul><p>如果后续报错都可以暴力使用npx解决。这一步出错有极大的可能性是之前路径写错了/文件夹名有更改。</p><p>安装完成后，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这一命令的意思是初始化博客。</p><p>然后进行静态部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ul><li>hexo g是hexo generate的简写，两者功能一样。</li></ul><p>部署完成后，启动本地服务器，预览一下我们的网页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="../images/Snipaste_2023-05-07_16-33-24.png" alt=""></p><p>此时此刻，在浏览器里输入<a href="http://localhost:4000/">http://localhost:4000/</a>   就能看到网页的样子。</p><p>顺带一提，也可以选中网站后右键”open“打开</p><p><img src="../images/Snipaste_2023-05-07_16-37-01.png" alt=""></p><p>大概会看到hexo的自带教程网页，如果打开能看到那就恭喜你！成功惹！</p><p>看爽了之后在git bash界面按下ctrl+c停止运行服务器。</p><h2 id="把hexo部署到GitHub"><a href="#把hexo部署到GitHub" class="headerlink" title="把hexo部署到GitHub"></a>把hexo部署到GitHub</h2><p>回到我们的Blog文件夹，用笔记本打开“_config.yml”文件（当然为了之后的方便最好去下载个什么sublime Text的这种软件啦看起来更爽一点）</p><p><img src="../images/Snipaste_2023-05-07_16-51-58.png" alt=""></p><p>下滑到最低端，加入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: github.com/1786022581/1786022581.github.io.git#你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>你的仓库地址就是下面这个：</p><p><img src="../images/Snipaste_2023-05-07_17-04-34.png" alt=""></p><p> 注意！！冒号后面有空格！！！</p><hr><p>如果报错了如何自查是一件非常重要的事情，遇到什么就百度不仅不准确还耗费精力。最简单的自查方式就是看报错：</p><p>假设我们忽略空格，就这么输入，然后部署。突然跳了一堆warning。</p><p>直接翻到最前面，会显示报错的位置，根据报错信息修改即可。<br><img src="../images/Snipaste_2023-05-07_16-59-49.png" alt=""></p><p>报错了不要慌，找bug也是<del>去世</del>进步的一环。</p><hr><p>回到Blog文件夹中，打开Git Bash,安装Git部署插件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后依次输入以下三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件和已生成的静态文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>完成后打开浏览器输入xxxxx.github.io就能打开网页了。</p><hr><h1 id="关于hexo常用命令的碎碎念"><a href="#关于hexo常用命令的碎碎念" class="headerlink" title="关于hexo常用命令的碎碎念"></a>关于hexo常用命令的碎碎念</h1><p>之后的网页调试中我们会经常使用下面的命令，这边简单一提，不用刻意去记因为这玩意用的次数真的太多了。也许你会记不住你的域名但是下面这几个命令肯定刻在dna里了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动本地服务器，用于预览主题，是hexo server的缩写。用于快速浏览自己的修改是否生效以及满意，预览的同时可以修改文章内容或主题代码，保存后刷新页面即可（对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清缓存用。网页突然报错什么的可以先用这个指令清清缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件，总之就是生成了！相当于你交作业之前肯定要先写作业，这一步就是写作业的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>自动生成网站静态文件，并部署到设定的仓库。完成这一步之后别人浏览你的网页才能看到你修改完后增减的东西。用上面的类比来说，这一步就意味着你把作业交上去了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程与心得体会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建流程：购入域名</title>
      <link href="/2023/04/29/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E8%B4%AD%E5%85%A5%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/04/29/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E8%B4%AD%E5%85%A5%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>  <h1 id="没用的废话"><a href="#没用的废话" class="headerlink" title="没用的废话"></a>没用的废话</h1><p>这是唯一需要花钱的部分（除非你想自己搞个服务器搭）。但是谁不想要一个独属于自己的网址呢~所以也是仅次于优化主题之后最快乐的部分。  </p><h1 id="在哪购买？"><a href="#在哪购买？" class="headerlink" title="在哪购买？"></a>在哪购买？</h1><p>可以在下列网站购买：<a href="https://wanwang.aliyun.com/">万网</a>  、<a href="https://www.godaddy.com/zh-sg/domains">Godaddy</a>  、<a href="https://cloud.tencent.com/">腾讯云</a><br>需要注意购买域名需要实名认证，并且审核大概需要3-4天左右（虽然我好像一天就过了？不太清楚他们审核时间）。<br>下面用腾讯云示例，每个网站购买域名的流程都大同小异，请根据个人条件挑选。  </p><h1 id="如何购买？"><a href="#如何购买？" class="headerlink" title="如何购买？"></a>如何购买？</h1><p>首先注册一个账户。然后在上方搜索框搜索“域名”之后点击“立即注册”按钮<br><img src="/images/QQ截图20230429162612.png" alt="显示这样"><br>输入你想要的域名名称，查询是否已经被注册。不能使用空格，可以使用“-”<br><img src="/images/QQ截图20230429163155.png" alt="显示这样"><br>然后根据自己经济能力挑选一款合适的，添加后点击右边的“立即购买”按钮。<br><img src="/images/QQ截图20230429163345.png" alt="显示这样"><br><img src="/images/QQ截图20230430223248.png" alt="显示这样"><br>到达购买界面之后，如果在之前未完成实名认证，需要创建自己的个人信息模板。<br><img src="/images/QQ截图20230430222617.png" alt="显示这样"><br>填写完毕并且审核完毕后，即可购入域名。</p>]]></content>
      
      
      <categories>
          
          <category> 教程与心得体会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建流程：前期准备</title>
      <link href="/2023/04/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2023/04/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仅供个人学习参考用。我很菜，只介绍一下自己的做法。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1.注册GitHub账号"></a>1.注册GitHub账号</h2><p>   打开<a href="https://github.com/">github官网</a><br>   点击页面中的<strong>sign up</strong> 开始注册<br>   <font size="1"> <del>接下来怎么做就不用我说了吧</del> </font>   </p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><p>   进入<a href="https://git-scm.com/">git官网</a><br>   点击<strong>Download</strong>，选择你的系统类型后开始下载。<br>   下载完成后，除了开头设置文件地址需要自己手动设置，其余部分都可以全点<strong>next</strong>跳过。<br>    <font color="#dd0000"><strong>一定要注意保存文件夹为英文且不带空格</strong></font><br /><br>   <font size="2"></p><blockquote><p>注：为了保证c盘不爆满导致系统出问题，我们应该把git下载到其他盘内。<br>请注意：不要随意更改地址文件名称。若更改后右键没法运行，请参考：<a href="https://www.cnblogs.com/MorningMaple/p/17056398.html">解决办法</a><br>   &lt;/font&gt;  </p></blockquote><p>   安装完成后，随便找个地方点击鼠标右键，出现<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong>栏即成功安装。<br>   打开<strong>Git Bash</strong>，输入<strong>git</strong>并回车。未报错即成功。<br>   <img src="/images/右键显示的样子.png" alt="右键显示的样子"></p><h2 id="3-绑定GitHub"><a href="#3-绑定GitHub" class="headerlink" title="3.绑定GitHub"></a>3.绑定GitHub</h2><h3 id="1-为什么要绑定？"><a href="#1-为什么要绑定？" class="headerlink" title="(1)为什么要绑定？"></a>(1)为什么要绑定？</h3><p>   用不太标准的方式来解释，我们是用<strong>GitHub</strong>来充当我们博客的服务器和总站。而为了更方便地增减有关博客的文件，我们要“克隆”一个仓库到我们的主机上。<br>   而克隆的过程就是绑定<strong>git</strong>和<strong>GitHub</strong>，这样我们就能快速方便地修改文件。<br>   这个过程我们使用SSH来绑定。SSH具体是什么可以自行百度，这里不多阐述。简单来说，SSH就是保障你的账户安全，将你的数据加密压缩，不仅防止其他人截获你的数据，还能加快传输速度。  </p><h3 id="2-如何绑定？"><a href="#2-如何绑定？" class="headerlink" title="(2)如何绑定？"></a>(2)如何绑定？</h3><p>   在git的安装文件夹下右键打开<strong>Git Bash</strong><br>   <img src="/images/git存放目录.png" alt="git存放目录"><br>   输入<strong>ssh</strong>，检查本机是否安装SSH。显示以下样子则已安装。<br>   <img src="/images/shell显示样子.png" alt="shell显示样子"><br>   如果没有安装，输入以下代码:  </p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>   加载完后重新输入<strong>ssh</strong>，查看是否安装完成。</p><blockquote><p>注：怎么判断命令是否已经执行完了呢？直接看有没有主机名字就好啦。<br><img src="/images/锵锵.png" alt="锵锵，就是这个五颜六色的那一栏"><br>以及，在git bash内，复制键为Ctrl+ins；粘贴键为Shitf+ins（ins为小键盘锁上方的那个小键，全称insert）  </p></blockquote><p>   SSH检查完成后，输入：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>   <font color="#dd0000"><strong>git的输入很重视是否有空格，以后在git内操作时若报错，请先检查是否是空格输入问题。</strong></font><br>    输入指令后敲四次回车键（多敲几次也没问题）。执行之后会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub。<br>    文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：  </p><blockquote><p>Linux 系统：~/.ssh<br>Mac 系统：~/.ssh<br>Win 10 ：C:/Users/ASUS/.ssh  </p></blockquote><p>   上面这段指令，简单来说就是创建了一个钥匙，这样我们通过Git向GitHub传文件时候就不需要每次都输入密码。<br>   接下来我们要做的事就是把这个钥匙放上GitHub。在Git Bash中直接输入：  </p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh  </span><br><span class="line">ls  </span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>   <img src="/images/1111111111111.png" alt="显示这样"><br>   接着进入Github用户主页，点击右上角的头像，点击<strong>settings</strong><br>   <img src="/images/QQ图片20230426221249.png" alt="显示这样"><br>   点击<strong>SSH and GPG keys</strong>，再点击<strong>New SSH key</strong>按钮<br>   <img src="/images/QQ截图20230426221739.png" alt="显示这样"><br>   把Git Bash之前用cat id_rsa.pub显示出来的一大串东西复制粘贴到第二个框里，title填啥都行。然后点击<strong>Add SSH key</strong><br>   <img src="/images/uTools_1682518794554.png" alt="显示这样"><br>   验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T git@github.com 进行检验：<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><blockquote><p>如果是第一次输入，可能会有warning提示，输入一个yes即可。  </p></blockquote><h3 id="3-提交文件"><a href="#3-提交文件" class="headerlink" title="(3)提交文件"></a>(3)提交文件</h3><blockquote><p>这里默认本地没有git仓库，和建立博客应该没啥关系，只是测试一下。  </p></blockquote><p>   在github中建立一个新项目<br>   <img src="/images/QQ截图20230426223514.png" alt="显示这样"><br>   <img src="/images/QQ截图20230426223556.png" alt="显示这样"><br>   进入新项目，复制一下地址。<br>   <img src="/images/QQ截图20230426223930.png" alt="显示这样"><br>   进入我们准备储存这玩意的文件夹，右键打开Git Bash。输入：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 这里替换成你刚刚复制的地址</span><br></pre></td></tr></table></figure></p><p>   等他加载好后，文件夹内应该有和你Github项目里一样的文件。<br>   <img src="/images/uTools_1682520235833.png" alt="显示这样"><br>   在里面随便建个txt文件测试一下（右键创建），然后右键打开Git Bash：<br>   <img src="/images/uTools_1682520340007.png" alt="显示这样"><br>   输入命令查看仓库状态：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p><p>   这个文件夹已经是一个 Git 仓库了，而我们刚刚创建的文件没有被追踪，也就是没有提交到本地仓库。现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add </span><br><span class="line">git commit -m</span><br></pre></td></tr></table></figure></p><p>   第一次提交可能会让你输入邮箱和密码，再次加入以下两行代码即可：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name&quot;你github用户名&quot; </span><br><span class="line">git config --global user.email&quot;***@***.com&quot;</span><br></pre></td></tr></table></figure></p><p>   输入完成后，可以使用’git log’和’git status’查看一下提交日志和仓库状态。<br>   然后我们使用Personal access tokens把本地仓库提交到Github上的仓库.<br>   还记得GitHub的<strong>setting</strong>在哪吧？点击setting，滑到最下面，点击<strong>Developer settings</strong>，然后按照图中那样生成一个token。<br>   <img src="/images/QQ截图20230426225427.png" alt="显示这样"><br>   <img src="/images/QQ截图20230426225535.png" alt="显示这样"><br>   复制一下token并且临时储存一下（这玩意只会显示这么一次，要不然就要重新创建）<br>   <img src="/images/QQ截图20230426225940.png" alt="显示这样"><br>   找到你本地clone的仓库代码，找到隐藏目录.git（不知道这玩意怎么显示可以百度或者直接在地址栏输入）<br>   进入后以记事本的形式打开config。ctrl+F搜索url。<br>   之前的应该是：<br>   <code>https://github.com/username/xxxxcode.git</code><br>   改为：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://oauth2:你的token放在这@github.com/username/xxxxcode.git</span><br></pre></td></tr></table></figure></p><p>   然后保存即可。<br>   回到Git Bash,输入：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure></p><p>   刷新GitHub中的仓库：这时我们的测试文件已经上传到了仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> 教程与心得体会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【雷顿教授与恶魔之箱】全谜题位置</title>
      <link href="/2023/04/23/%E3%80%90%E9%9B%B7%E9%A1%BF%E6%95%99%E6%8E%88%E4%B8%8E%E6%81%B6%E9%AD%94%E4%B9%8B%E7%AE%B1%E3%80%91%E5%85%A8%E8%B0%9C%E9%A2%98%E4%BD%8D%E7%BD%AE/"/>
      <url>/2023/04/23/%E3%80%90%E9%9B%B7%E9%A1%BF%E6%95%99%E6%8E%88%E4%B8%8E%E6%81%B6%E9%AD%94%E4%B9%8B%E7%AE%B1%E3%80%91%E5%85%A8%E8%B0%9C%E9%A2%98%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>找了半天终于凑全了，这一代谜题全收集真的很头疼。<br>有些谜题是在谜婆那边收录的，故会标记为“迷路孩子的谜之屋”。<br>有的谜题是喝茶时候给的，记得反复来回切场景刷。<br><span id="more"></span></p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>001 研究室前面</p><p>002 公寓入口</p><p>003 房间入口</p><p>004 舒莱达的房间</p><p>005 雷顿一行人的私人房间</p><p>006 6车厢通道</p><p>007 第5车厢食堂</p><p>008 第5车厢食堂</p><p>009 第5车厢食堂</p><p>010 第5车厢食堂</p><p>011 展望台</p><p>012 7车厢通道</p><p>013 厨房</p><p>014 厨房</p><p>015 3车厢走廊</p><p>016 罗丝夫人的房间</p><p>017 雷顿一行人的私人房间</p><p>018 3车厢走廊</p><p>019 3车厢走廊</p><p>020 4车厢通道</p><p>021 4车厢单间</p><p>022 展望台</p><p>023 迷路孩子的谜之屋</p><p>024 3车厢走廊</p><p>025 展望台</p><p>026 故障的列车</p><p>027 迷路孩子的谜之屋</p><p>028 办公所的上坡路</p><p>029 办公所的上坡路</p><p>030 镇办公楼</p><p>031 杂货店</p><p>032 树丛</p><p>033 镇外</p><p>034 树丛</p><p>035 麦田</p><p>036 树丛</p><p>037 麦田</p><p>038 牧场路口</p><p>039 牛的品评会</p><p>040 到处摆摊的大通道</p><p>041 迷路孩子的谜之屋</p><p>042 去牧场的路</p><p>043 去牧场的路</p><p>044 牧场路口</p><p>045 牧场路口</p><p>046 办公所的上坡路</p><p>047 镇办公楼</p><p>048 牛的品评会</p><p>049 迷路孩子的谜之屋</p><p>050 牛的品评会</p><p>051 杂货店</p><p>052 迷路孩子的谜之屋</p><p>053 镇办公楼</p><p>054 麦田</p><p>055 月台</p><p>056 3车厢走廊</p><p>057 特等室</p><p>058 特等室</p><p>059 特等室</p><p>060 站前</p><p>061 旅馆前</p><p>062 旅馆客房</p><p>063 古道具店</p><p>064 古道具店</p><p>065 古道具店</p><p>066 废坑入口</p><p>067 旅馆前</p><p>068 东通道</p><p>069 东通道</p><p>070 可疑的店</p><p>071 可疑的店</p><p>072 照相馆</p><p>073 钟塔的广场</p><p>074 食品店</p><p>075 西通道</p><p>076 瞭望台</p><p>077 废坑的机械房间</p><p>078 废坑的T字路</p><p>079废坑的机械房间</p><p>080 废坑的升降梯</p><p>081 废坑的金库房间</p><p>082 废坑的金库房价</p><p>083 胡同入口</p><p>084 胡同入口</p><p>085 西通道</p><p>086 胡同深处之间</p><p>087 岔路</p><p>088 地下机械室</p><p>089 钟塔的广场</p><p>090 喷泉</p><p>091 旅馆前</p><p>092 旅馆大厅</p><p>093 大通道</p><p>094 纪念馆1楼</p><p>095 纪念馆2楼</p><p>096 照相馆</p><p>097 迷路之森2</p><p>098 迷路孩子的谜之屋</p><p>099 食品店</p><p>100 龙之桥</p><p>101 钟塔的广场</p><p>102 商业区入口</p><p>103 站前</p><p>104 西通道</p><p>105 岔路</p><p>106 菲尔泽纪念馆</p><p>107 菲尔泽纪念馆</p><p>108 菲尔泽纪念馆</p><p>109 西丫字路</p><p>110 旅馆大厅</p><p>111 旅馆大厅</p><p>112 纪念馆前广场</p><p>113 商业区入口</p><p>114 旅馆客房</p><p>115 迷路孩子的谜之屋</p><p>116 损坏的门</p><p>117 西丫字路</p><p>118 满是垃圾的胡同</p><p>119 瞭望塔一楼</p><p>120 西丫字路</p><p>121 迷路之森1</p><p>122 迷路之森1</p><p>123 迷路之森2</p><p>124 昏暗的胡同</p><p>125 迷路之森2</p><p>126 迷路之森3</p><p>127 迷路之森3</p><p>128 迷路之森3</p><p>129 谜婆馆前</p><p>130 卧室</p><p>131 小房间</p><p>132 公馆玄关</p><p>133 小房间</p><p>134 地下机械室</p><p>135 隐藏房间</p><p>136 用餐房</p><p>137 公馆玄关</p><p>138 遗址</p><p>之后的都在秘密房间里 </p>]]></content>
      
      
      <categories>
          
          <category> 游戏攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雷顿教授 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/22/hello-world/"/>
      <url>/2023/04/22/hello-world/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 无意义垃圾箱 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
